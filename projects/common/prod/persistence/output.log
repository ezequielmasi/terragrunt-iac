module.ecr_repositories["nginx-backend"].aws_ecr_repository.this: Refreshing state... [id=nginx-backend]
module.ecr_repositories["guestaccess-fup"].aws_ecr_repository.this: Refreshing state... [id=guestaccess-fup]
module.ecr_repositories["vycontrol"].aws_ecr_repository.this: Refreshing state... [id=vycontrol]
module.ecr_repositories["gc-whisper"].aws_ecr_repository.this: Refreshing state... [id=gc-whisper]
module.ecr_repositories["nginx"].aws_ecr_repository.this: Refreshing state... [id=nginx]
module.ecr_repositories["backup-manager"].aws_ecr_repository.this: Refreshing state... [id=backup-manager]
module.ecr_repositories["php-fpm-fup"].aws_ecr_repository.this: Refreshing state... [id=php-fpm-fup]
module.ecr_repositories["guestaccess-api-edge-base"].aws_ecr_repository.this: Refreshing state... [id=guestaccess-api-edge-base]
module.ecr_repositories["gosmtp"].aws_ecr_repository.this: Refreshing state... [id=gosmtp]
module.ecr_repositories["deploy-backend"].aws_ecr_repository.this: Refreshing state... [id=deploy-backend]
module.ecr_repositories["cloudone-pms-guest-in-house-mirror"].aws_ecr_repository.this: Refreshing state... [id=cloudone-pms-guest-in-house-mirror]
module.ecr_repositories["nginx-servicios-1"].aws_ecr_repository.this: Refreshing state... [id=nginx-servicios-1]
module.ecr_repositories["help.me"].aws_ecr_repository.this: Refreshing state... [id=help.me]
module.ecr_repositories["nginx-fup"].aws_ecr_repository.this: Refreshing state... [id=nginx-fup]
module.ecr_repositories["webphone"].aws_ecr_repository.this: Refreshing state... [id=webphone]
module.ecr_repositories["radius-7-6"].aws_ecr_repository.this: Refreshing state... [id=radius-7-6]
module.ecr_repositories["nimbi2.0"].aws_ecr_repository.this: Refreshing state... [id=nimbi2.0]
module.ecr_repositories["spa-form-backend"].aws_ecr_repository.this: Refreshing state... [id=spa-form-backend]
module.ecr_repositories["pms-emule-micros"].aws_ecr_repository.this: Refreshing state... [id=pms-emule-micros]
module.ecr_repositories["pms-interface-htng"].aws_ecr_repository.this: Refreshing state... [id=pms-interface-htng]
module.ecr_repositories["guestaccess-print"].aws_ecr_repository.this: Refreshing state... [id=guestaccess-print]
module.ecr_repositories["tracker-crm-uat"].aws_ecr_repository.this: Refreshing state... [id=tracker-crm-uat]
module.ecr_repositories["portainer"].aws_ecr_repository.this: Refreshing state... [id=portainer]
module.ecr_repositories["grafana"].aws_ecr_repository.this: Refreshing state... [id=grafana]
module.ecr_repositories["gotools"].aws_ecr_repository.this: Refreshing state... [id=gotools]
module.ecr_repositories["gc-rrdtool"].aws_ecr_repository.this: Refreshing state... [id=gc-rrdtool]
module.ecr_repositories["guestaccess-api-fup-base"].aws_ecr_repository.this: Refreshing state... [id=guestaccess-api-fup-base]
module.ecr_repositories["jenkins-fup"].aws_ecr_repository.this: Refreshing state... [id=jenkins-fup]
module.ecr_repositories["radius"].aws_ecr_repository.this: Refreshing state... [id=radius]
module.ecr_repositories["access-session-api"].aws_ecr_repository.this: Refreshing state... [id=access-session-api]
module.ecr_repositories["cloudone-pms-contactless-mirror"].aws_ecr_repository.this: Refreshing state... [id=cloudone-pms-contactless-mirror]
module.ecr_repositories["contactless-backoffice"].aws_ecr_repository.this: Refreshing state... [id=contactless-backoffice]
module.ecr_repositories["chromecast-token-api"].aws_ecr_repository.this: Refreshing state... [id=chromecast-token-api]
module.ecr_repositories["auvik-webhook-api"].aws_ecr_repository.this: Refreshing state... [id=auvik-webhook-api]
module.ecr_repositories["crm-history"].aws_ecr_repository.this: Refreshing state... [id=crm-history]
module.ecr_repositories["pbx-mailalertcall"].aws_ecr_repository.this: Refreshing state... [id=pbx-mailalertcall]
module.ecr_repositories["siptrunk"].aws_ecr_repository.this: Refreshing state... [id=siptrunk]
module.ecr_repositories["gc-pms-emule"].aws_ecr_repository.this: Refreshing state... [id=gc-pms-emule]
module.ecr_repositories["php-fpm-backend"].aws_ecr_repository.this: Refreshing state... [id=php-fpm-backend]
module.ecr_repositories["hitalos-laravel"].aws_ecr_repository.this: Refreshing state... [id=hitalos-laravel]
module.ecr_repositories["test-deploy"].aws_ecr_repository.this: Refreshing state... [id=test-deploy]
module.ecr_repositories["aws/cli"].aws_ecr_repository.this: Refreshing state... [id=aws/cli]
module.ecr_repositories["apache2-backend"].aws_ecr_repository.this: Refreshing state... [id=apache2-backend]
module.ecr_repositories["guestaccess-bandwidth-calendar"].aws_ecr_repository.this: Refreshing state... [id=guestaccess-bandwidth-calendar]
module.ecr_repositories["crm"].aws_ecr_repository.this: Refreshing state... [id=crm]
module.ecr_repositories["pms"].aws_ecr_repository.this: Refreshing state... [id=pms]
module.ecr_repositories["api-fup-metrics-exporter"].aws_ecr_repository.this: Refreshing state... [id=api-fup-metrics-exporter]
module.ecr_repositories["guestaccess-api-backoffice-base"].aws_ecr_repository.this: Refreshing state... [id=guestaccess-api-backoffice-base]
module.ecr_repositories["guestaccess-api-edge"].aws_ecr_repository.this: Refreshing state... [id=guestaccess-api-edge]
module.ecr_repositories["codebuild/php"].aws_ecr_repository.this: Refreshing state... [id=codebuild/php]
module.ecr_repositories["guestaccess-api-backoffice"].aws_ecr_repository.this: Refreshing state... [id=guestaccess-api-backoffice]
module.ecr_repositories["radius-go"].aws_ecr_repository.this: Refreshing state... [id=radius-go]
module.ecr_repositories["prometheus"].aws_ecr_repository.this: Refreshing state... [id=prometheus]
module.ecr_repositories["fop2"].aws_ecr_repository.this: Refreshing state... [id=fop2]
module.ecr_repositories["api-edge"].aws_ecr_repository.this: Refreshing state... [id=api-edge]
module.ecr_repositories["gc-ros-emule"].aws_ecr_repository.this: Refreshing state... [id=gc-ros-emule]
module.ecr_repositories["cloudone-pms-api"].aws_ecr_repository.this: Refreshing state... [id=cloudone-pms-api]
module.ecr_repositories["cloudone-pms-proxy"].aws_ecr_repository.this: Refreshing state... [id=cloudone-pms-proxy]
module.ecr_repositories["chromecast-token-worker"].aws_ecr_repository.this: Refreshing state... [id=chromecast-token-worker]
module.ecr_repositories["guestaccess-api-fup"].aws_ecr_repository.this: Refreshing state... [id=guestaccess-api-fup]
module.ecr_repositories["contactless-backend"].aws_ecr_repository.this: Refreshing state... [id=contactless-backend]
module.ecr_repositories["access-backup-manager"].aws_ecr_repository.this: Refreshing state... [id=access-backup-manager]
module.ecr_repositories["cloudone-pms-interface"].aws_ecr_repository.this: Refreshing state... [id=cloudone-pms-interface]
module.ecr_repositories["api-backend"].aws_ecr_repository.this: Refreshing state... [id=api-backend]
module.ecr_repositories["guestaccess-backoffice"].aws_ecr_repository.this: Refreshing state... [id=guestaccess-backoffice]
module.ecr_repositories["tracker-crm"].aws_ecr_repository.this: Refreshing state... [id=tracker-crm]
module.ecr_repositories["twilio-webhook"].aws_ecr_repository.this: Refreshing state... [id=twilio-webhook]
module.ecr_repositories["remote-syslog"].aws_ecr_repository.this: Refreshing state... [id=remote-syslog]
module.ecr_repositories["api-fup"].aws_ecr_repository.this: Refreshing state... [id=api-fup]
module.ecr_repositories["gc-freeradius-3"].aws_ecr_repository.this: Refreshing state... [id=gc-freeradius-3]
module.ecr_repositories["radius3"].aws_ecr_repository.this: Refreshing state... [id=radius3]
module.ecr_repositories["webnimbus-api"].aws_ecr_repository.this: Refreshing state... [id=webnimbus-api]
module.ecr_repositories["radius-mac-auth"].aws_ecr_repository.this: Refreshing state... [id=radius-mac-auth]
module.ecr_repositories["asternic"].aws_ecr_repository.this: Refreshing state... [id=asternic]
module.ecr_repositories["pbx"].aws_ecr_repository.this: Refreshing state... [id=pbx]
module.ecr_repositories["opendns-scheduler"].aws_ecr_repository.this: Refreshing state... [id=opendns-scheduler]
module.ecr_repositories["access-ssh-tunnel"].aws_ecr_repository.this: Refreshing state... [id=access-ssh-tunnel]
module.ecr_repositories["gotools-api-pms"].aws_ecr_repository.this: Refreshing state... [id=gotools-api-pms]
module.ecr_repositories["contactless-front"].aws_ecr_repository.this: Refreshing state... [id=contactless-front]
module.ecr_repositories["go-rabbit"].aws_ecr_repository.this: Refreshing state... [id=go-rabbit]
module.ecr_repositories["cloudone-pms-scheduler"].aws_ecr_repository.this: Refreshing state... [id=cloudone-pms-scheduler]
module.ecr_repositories["cloudone-pms-mirror"].aws_ecr_repository.this: Refreshing state... [id=cloudone-pms-mirror]
module.ecr_repositories["access-backup-manager"].aws_ecr_lifecycle_policy.this: Refreshing state... [id=access-backup-manager]
module.ecr_repositories["access-backup-manager"].aws_ecr_repository_policy.this: Refreshing state... [id=access-backup-manager]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
  ~ update in-place
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # module.ecr_repositories["access-backup-manager"].aws_ecr_lifecycle_policy.this must be replaced
-/+ resource "aws_ecr_lifecycle_policy" "this" {
      ~ id          = "access-backup-manager" -> (known after apply)
      ~ policy      = jsonencode(
          ~ {
              ~ rules = [
                  ~ {
                      ~ description  = "Keep last 5 untagged images" -> "Keep last 20 untagged images"
                      ~ selection    = {
                          ~ countNumber = 5 -> 20
                            # (2 unchanged elements hidden)
                        }
                        # (2 unchanged elements hidden)
                    },
                    {
                        action       = {
                            type = "expire"
                        }
                        description  = "Keep last 100 tagged images"
                        rulePriority = 2
                        selection    = {
                            countNumber   = 100
                            countType     = "imageCountMoreThan"
                            tagPrefixList = [
                                "latest",
                            ]
                            tagStatus     = "tagged"
                        }
                    },
                ]
            } # forces replacement
        )
      ~ registry_id = "526672058471" -> (known after apply)
        # (1 unchanged attribute hidden)
    }

  # module.ecr_repositories["access-session-api"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "access-session-api"
    }

  # module.ecr_repositories["access-session-api"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "access-session-api"
        name                 = "access-session-api"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["access-session-api"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "access-session-api"
    }

  # module.ecr_repositories["access-ssh-tunnel"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "access-ssh-tunnel"
    }

  # module.ecr_repositories["access-ssh-tunnel"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "access-ssh-tunnel"
        name                 = "access-ssh-tunnel"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["access-ssh-tunnel"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "access-ssh-tunnel"
    }

  # module.ecr_repositories["apache2-backend"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "apache2-backend"
    }

  # module.ecr_repositories["apache2-backend"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "apache2-backend"
        name                 = "apache2-backend"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["apache2-backend"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "apache2-backend"
    }

  # module.ecr_repositories["api-backend"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "api-backend"
    }

  # module.ecr_repositories["api-backend"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "api-backend"
        name                 = "api-backend"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["api-backend"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "api-backend"
    }

  # module.ecr_repositories["api-edge"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "api-edge"
    }

  # module.ecr_repositories["api-edge"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "api-edge"
        name                 = "api-edge"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["api-edge"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "api-edge"
    }

  # module.ecr_repositories["api-fup"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "api-fup"
    }

  # module.ecr_repositories["api-fup"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "api-fup"
        name                 = "api-fup"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["api-fup"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "api-fup"
    }

  # module.ecr_repositories["api-fup-metrics-exporter"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "api-fup-metrics-exporter"
    }

  # module.ecr_repositories["api-fup-metrics-exporter"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "api-fup-metrics-exporter"
        name                 = "api-fup-metrics-exporter"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["api-fup-metrics-exporter"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "api-fup-metrics-exporter"
    }

  # module.ecr_repositories["asternic"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "asternic"
    }

  # module.ecr_repositories["asternic"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "asternic"
        name                 = "asternic"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["asternic"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "asternic"
    }

  # module.ecr_repositories["auvik-webhook-api"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "auvik-webhook-api"
    }

  # module.ecr_repositories["auvik-webhook-api"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "auvik-webhook-api"
        name                 = "auvik-webhook-api"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["auvik-webhook-api"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "auvik-webhook-api"
    }

  # module.ecr_repositories["aws/cli"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "aws/cli"
    }

  # module.ecr_repositories["aws/cli"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "aws/cli"
        name                 = "aws/cli"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["aws/cli"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "aws/cli"
    }

  # module.ecr_repositories["backup-manager"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "backup-manager"
    }

  # module.ecr_repositories["backup-manager"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "backup-manager"
        name                 = "backup-manager"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["backup-manager"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "backup-manager"
    }

  # module.ecr_repositories["chromecast-token-api"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "chromecast-token-api"
    }

  # module.ecr_repositories["chromecast-token-api"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "chromecast-token-api"
        name                 = "chromecast-token-api"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["chromecast-token-api"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "chromecast-token-api"
    }

  # module.ecr_repositories["chromecast-token-worker"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "chromecast-token-worker"
    }

  # module.ecr_repositories["chromecast-token-worker"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "chromecast-token-worker"
        name                 = "chromecast-token-worker"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["chromecast-token-worker"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "chromecast-token-worker"
    }

  # module.ecr_repositories["cloudone-pms-api"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-api"
    }

  # module.ecr_repositories["cloudone-pms-api"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "cloudone-pms-api"
        name                 = "cloudone-pms-api"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["cloudone-pms-api"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-api"
    }

  # module.ecr_repositories["cloudone-pms-contactless-mirror"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-contactless-mirror"
    }

  # module.ecr_repositories["cloudone-pms-contactless-mirror"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "cloudone-pms-contactless-mirror"
        name                 = "cloudone-pms-contactless-mirror"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["cloudone-pms-contactless-mirror"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-contactless-mirror"
    }

  # module.ecr_repositories["cloudone-pms-guest-in-house-mirror"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-guest-in-house-mirror"
    }

  # module.ecr_repositories["cloudone-pms-guest-in-house-mirror"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "cloudone-pms-guest-in-house-mirror"
        name                 = "cloudone-pms-guest-in-house-mirror"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["cloudone-pms-guest-in-house-mirror"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-guest-in-house-mirror"
    }

  # module.ecr_repositories["cloudone-pms-interface"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-interface"
    }

  # module.ecr_repositories["cloudone-pms-interface"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "cloudone-pms-interface"
        name                 = "cloudone-pms-interface"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["cloudone-pms-interface"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-interface"
    }

  # module.ecr_repositories["cloudone-pms-mirror"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-mirror"
    }

  # module.ecr_repositories["cloudone-pms-mirror"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "cloudone-pms-mirror"
        name                 = "cloudone-pms-mirror"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["cloudone-pms-mirror"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-mirror"
    }

  # module.ecr_repositories["cloudone-pms-proxy"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-proxy"
    }

  # module.ecr_repositories["cloudone-pms-proxy"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "cloudone-pms-proxy"
        name                 = "cloudone-pms-proxy"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["cloudone-pms-proxy"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-proxy"
    }

  # module.ecr_repositories["cloudone-pms-scheduler"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-scheduler"
    }

  # module.ecr_repositories["cloudone-pms-scheduler"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "cloudone-pms-scheduler"
        name                 = "cloudone-pms-scheduler"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["cloudone-pms-scheduler"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "cloudone-pms-scheduler"
    }

  # module.ecr_repositories["codebuild/php"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "codebuild/php"
    }

  # module.ecr_repositories["codebuild/php"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "codebuild/php"
        name                 = "codebuild/php"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["codebuild/php"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "codebuild/php"
    }

  # module.ecr_repositories["contactless-backend"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "contactless-backend"
    }

  # module.ecr_repositories["contactless-backend"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "contactless-backend"
        name                 = "contactless-backend"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["contactless-backend"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "contactless-backend"
    }

  # module.ecr_repositories["contactless-backoffice"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "contactless-backoffice"
    }

  # module.ecr_repositories["contactless-backoffice"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "contactless-backoffice"
        name                 = "contactless-backoffice"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["contactless-backoffice"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "contactless-backoffice"
    }

  # module.ecr_repositories["contactless-front"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "contactless-front"
    }

  # module.ecr_repositories["contactless-front"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "contactless-front"
        name                 = "contactless-front"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["contactless-front"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "contactless-front"
    }

  # module.ecr_repositories["crm"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "crm"
    }

  # module.ecr_repositories["crm"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "crm"
        name                 = "crm"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["crm"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "crm"
    }

  # module.ecr_repositories["crm-history"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "crm-history"
    }

  # module.ecr_repositories["crm-history"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "crm-history"
        name                 = "crm-history"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["crm-history"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "crm-history"
    }

  # module.ecr_repositories["deploy-backend"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "deploy-backend"
    }

  # module.ecr_repositories["deploy-backend"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "deploy-backend"
        name                 = "deploy-backend"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["deploy-backend"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "deploy-backend"
    }

  # module.ecr_repositories["fop2"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "fop2"
    }

  # module.ecr_repositories["fop2"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "fop2"
        name                 = "fop2"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["fop2"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "fop2"
    }

  # module.ecr_repositories["gc-freeradius-3"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "gc-freeradius-3"
    }

  # module.ecr_repositories["gc-freeradius-3"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "gc-freeradius-3"
        name                 = "gc-freeradius-3"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["gc-freeradius-3"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "gc-freeradius-3"
    }

  # module.ecr_repositories["gc-pms-emule"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "gc-pms-emule"
    }

  # module.ecr_repositories["gc-pms-emule"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "gc-pms-emule"
        name                 = "gc-pms-emule"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["gc-pms-emule"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "gc-pms-emule"
    }

  # module.ecr_repositories["gc-ros-emule"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "gc-ros-emule"
    }

  # module.ecr_repositories["gc-ros-emule"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "gc-ros-emule"
        name                 = "gc-ros-emule"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["gc-ros-emule"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "gc-ros-emule"
    }

  # module.ecr_repositories["gc-rrdtool"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "gc-rrdtool"
    }

  # module.ecr_repositories["gc-rrdtool"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "gc-rrdtool"
        name                 = "gc-rrdtool"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["gc-rrdtool"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "gc-rrdtool"
    }

  # module.ecr_repositories["gc-whisper"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "gc-whisper"
    }

  # module.ecr_repositories["gc-whisper"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "gc-whisper"
        name                 = "gc-whisper"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["gc-whisper"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "gc-whisper"
    }

  # module.ecr_repositories["go-rabbit"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "go-rabbit"
    }

  # module.ecr_repositories["go-rabbit"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "go-rabbit"
        name                 = "go-rabbit"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["go-rabbit"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "go-rabbit"
    }

  # module.ecr_repositories["gosmtp"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "gosmtp"
    }

  # module.ecr_repositories["gosmtp"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "gosmtp"
        name                 = "gosmtp"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["gosmtp"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "gosmtp"
    }

  # module.ecr_repositories["gotools"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "gotools"
    }

  # module.ecr_repositories["gotools"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "gotools"
        name                 = "gotools"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["gotools"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "gotools"
    }

  # module.ecr_repositories["gotools-api-pms"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "gotools-api-pms"
    }

  # module.ecr_repositories["gotools-api-pms"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "gotools-api-pms"
        name                 = "gotools-api-pms"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["gotools-api-pms"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "gotools-api-pms"
    }

  # module.ecr_repositories["grafana"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "grafana"
    }

  # module.ecr_repositories["grafana"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "grafana"
        name                 = "grafana"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["grafana"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "grafana"
    }

  # module.ecr_repositories["guestaccess-api-backoffice"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-api-backoffice"
    }

  # module.ecr_repositories["guestaccess-api-backoffice"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "guestaccess-api-backoffice"
        name                 = "guestaccess-api-backoffice"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["guestaccess-api-backoffice"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-api-backoffice"
    }

  # module.ecr_repositories["guestaccess-api-backoffice-base"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-api-backoffice-base"
    }

  # module.ecr_repositories["guestaccess-api-backoffice-base"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "guestaccess-api-backoffice-base"
        name                 = "guestaccess-api-backoffice-base"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["guestaccess-api-backoffice-base"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-api-backoffice-base"
    }

  # module.ecr_repositories["guestaccess-api-edge"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-api-edge"
    }

  # module.ecr_repositories["guestaccess-api-edge"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "guestaccess-api-edge"
        name                 = "guestaccess-api-edge"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["guestaccess-api-edge"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-api-edge"
    }

  # module.ecr_repositories["guestaccess-api-edge-base"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-api-edge-base"
    }

  # module.ecr_repositories["guestaccess-api-edge-base"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "guestaccess-api-edge-base"
        name                 = "guestaccess-api-edge-base"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["guestaccess-api-edge-base"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-api-edge-base"
    }

  # module.ecr_repositories["guestaccess-api-fup"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-api-fup"
    }

  # module.ecr_repositories["guestaccess-api-fup"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "guestaccess-api-fup"
        name                 = "guestaccess-api-fup"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["guestaccess-api-fup"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-api-fup"
    }

  # module.ecr_repositories["guestaccess-api-fup-base"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-api-fup-base"
    }

  # module.ecr_repositories["guestaccess-api-fup-base"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "guestaccess-api-fup-base"
        name                 = "guestaccess-api-fup-base"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["guestaccess-api-fup-base"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-api-fup-base"
    }

  # module.ecr_repositories["guestaccess-backoffice"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-backoffice"
    }

  # module.ecr_repositories["guestaccess-backoffice"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "guestaccess-backoffice"
        name                 = "guestaccess-backoffice"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["guestaccess-backoffice"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-backoffice"
    }

  # module.ecr_repositories["guestaccess-bandwidth-calendar"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-bandwidth-calendar"
    }

  # module.ecr_repositories["guestaccess-bandwidth-calendar"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "guestaccess-bandwidth-calendar"
        name                 = "guestaccess-bandwidth-calendar"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["guestaccess-bandwidth-calendar"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-bandwidth-calendar"
    }

  # module.ecr_repositories["guestaccess-fup"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-fup"
    }

  # module.ecr_repositories["guestaccess-fup"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "guestaccess-fup"
        name                 = "guestaccess-fup"
      ~ tags                 = {
          + "layer"       = "persistence"
          ~ "project"     = "guestaccess" -> "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
            # (1 unchanged element hidden)
        }
      ~ tags_all             = {
          + "layer"       = "persistence"
          ~ "project"     = "guestaccess" -> "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
            # (1 unchanged element hidden)
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["guestaccess-fup"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-fup"
    }

  # module.ecr_repositories["guestaccess-print"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-print"
    }

  # module.ecr_repositories["guestaccess-print"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "guestaccess-print"
        name                 = "guestaccess-print"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["guestaccess-print"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "guestaccess-print"
    }

  # module.ecr_repositories["help.me"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "help.me"
    }

  # module.ecr_repositories["help.me"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "help.me"
        name                 = "help.me"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["help.me"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "help.me"
    }

  # module.ecr_repositories["hitalos-laravel"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "hitalos-laravel"
    }

  # module.ecr_repositories["hitalos-laravel"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "hitalos-laravel"
        name                 = "hitalos-laravel"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["hitalos-laravel"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "hitalos-laravel"
    }

  # module.ecr_repositories["jenkins-fup"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "jenkins-fup"
    }

  # module.ecr_repositories["jenkins-fup"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "jenkins-fup"
        name                 = "jenkins-fup"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["jenkins-fup"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "jenkins-fup"
    }

  # module.ecr_repositories["nginx"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "nginx"
    }

  # module.ecr_repositories["nginx"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "nginx"
        name                 = "nginx"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["nginx"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "nginx"
    }

  # module.ecr_repositories["nginx-backend"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "nginx-backend"
    }

  # module.ecr_repositories["nginx-backend"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "nginx-backend"
        name                 = "nginx-backend"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["nginx-backend"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "nginx-backend"
    }

  # module.ecr_repositories["nginx-fup"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "nginx-fup"
    }

  # module.ecr_repositories["nginx-fup"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "nginx-fup"
        name                 = "nginx-fup"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["nginx-fup"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "nginx-fup"
    }

  # module.ecr_repositories["nginx-servicios-1"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "nginx-servicios-1"
    }

  # module.ecr_repositories["nginx-servicios-1"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "nginx-servicios-1"
        name                 = "nginx-servicios-1"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["nginx-servicios-1"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "nginx-servicios-1"
    }

  # module.ecr_repositories["nimbi2.0"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "nimbi2.0"
    }

  # module.ecr_repositories["nimbi2.0"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "nimbi2.0"
        name                 = "nimbi2.0"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["nimbi2.0"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "nimbi2.0"
    }

  # module.ecr_repositories["opendns-scheduler"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "opendns-scheduler"
    }

  # module.ecr_repositories["opendns-scheduler"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "opendns-scheduler"
        name                 = "opendns-scheduler"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["opendns-scheduler"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "opendns-scheduler"
    }

  # module.ecr_repositories["pbx"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "pbx"
    }

  # module.ecr_repositories["pbx"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "pbx"
        name                 = "pbx"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["pbx"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "pbx"
    }

  # module.ecr_repositories["pbx-mailalertcall"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "pbx-mailalertcall"
    }

  # module.ecr_repositories["pbx-mailalertcall"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "pbx-mailalertcall"
        name                 = "pbx-mailalertcall"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["pbx-mailalertcall"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "pbx-mailalertcall"
    }

  # module.ecr_repositories["php-fpm-backend"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "php-fpm-backend"
    }

  # module.ecr_repositories["php-fpm-backend"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "php-fpm-backend"
        name                 = "php-fpm-backend"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["php-fpm-backend"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "php-fpm-backend"
    }

  # module.ecr_repositories["php-fpm-fup"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "php-fpm-fup"
    }

  # module.ecr_repositories["php-fpm-fup"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "php-fpm-fup"
        name                 = "php-fpm-fup"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["php-fpm-fup"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "php-fpm-fup"
    }

  # module.ecr_repositories["pms"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "pms"
    }

  # module.ecr_repositories["pms"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "pms"
        name                 = "pms"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["pms"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "pms"
    }

  # module.ecr_repositories["pms-emule-micros"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "pms-emule-micros"
    }

  # module.ecr_repositories["pms-emule-micros"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "pms-emule-micros"
        name                 = "pms-emule-micros"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["pms-emule-micros"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "pms-emule-micros"
    }

  # module.ecr_repositories["pms-interface-htng"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "pms-interface-htng"
    }

  # module.ecr_repositories["pms-interface-htng"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "pms-interface-htng"
        name                 = "pms-interface-htng"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["pms-interface-htng"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "pms-interface-htng"
    }

  # module.ecr_repositories["portainer"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "portainer"
    }

  # module.ecr_repositories["portainer"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "portainer"
        name                 = "portainer"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["portainer"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "portainer"
    }

  # module.ecr_repositories["prometheus"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "prometheus"
    }

  # module.ecr_repositories["prometheus"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "prometheus"
        name                 = "prometheus"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["prometheus"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "prometheus"
    }

  # module.ecr_repositories["radius"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "radius"
    }

  # module.ecr_repositories["radius"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "radius"
        name                 = "radius"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["radius"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "radius"
    }

  # module.ecr_repositories["radius-7-6"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "radius-7-6"
    }

  # module.ecr_repositories["radius-7-6"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "radius-7-6"
        name                 = "radius-7-6"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["radius-7-6"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "radius-7-6"
    }

  # module.ecr_repositories["radius-go"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "radius-go"
    }

  # module.ecr_repositories["radius-go"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "radius-go"
        name                 = "radius-go"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["radius-go"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "radius-go"
    }

  # module.ecr_repositories["radius-mac-auth"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "radius-mac-auth"
    }

  # module.ecr_repositories["radius-mac-auth"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "radius-mac-auth"
        name                 = "radius-mac-auth"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["radius-mac-auth"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "radius-mac-auth"
    }

  # module.ecr_repositories["radius3"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "radius3"
    }

  # module.ecr_repositories["radius3"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "radius3"
        name                 = "radius3"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["radius3"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "radius3"
    }

  # module.ecr_repositories["remote-syslog"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "remote-syslog"
    }

  # module.ecr_repositories["remote-syslog"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "remote-syslog"
        name                 = "remote-syslog"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["remote-syslog"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "remote-syslog"
    }

  # module.ecr_repositories["siptrunk"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "siptrunk"
    }

  # module.ecr_repositories["siptrunk"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "siptrunk"
        name                 = "siptrunk"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["siptrunk"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "siptrunk"
    }

  # module.ecr_repositories["spa-form-backend"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "spa-form-backend"
    }

  # module.ecr_repositories["spa-form-backend"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "spa-form-backend"
        name                 = "spa-form-backend"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["spa-form-backend"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "spa-form-backend"
    }

  # module.ecr_repositories["test-deploy"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "test-deploy"
    }

  # module.ecr_repositories["test-deploy"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "test-deploy"
        name                 = "test-deploy"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["test-deploy"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "test-deploy"
    }

  # module.ecr_repositories["tracker-crm"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "tracker-crm"
    }

  # module.ecr_repositories["tracker-crm"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "tracker-crm"
        name                 = "tracker-crm"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["tracker-crm"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "tracker-crm"
    }

  # module.ecr_repositories["tracker-crm-uat"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "tracker-crm-uat"
    }

  # module.ecr_repositories["tracker-crm-uat"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "tracker-crm-uat"
        name                 = "tracker-crm-uat"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["tracker-crm-uat"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "tracker-crm-uat"
    }

  # module.ecr_repositories["twilio-webhook"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "twilio-webhook"
    }

  # module.ecr_repositories["twilio-webhook"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "twilio-webhook"
        name                 = "twilio-webhook"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["twilio-webhook"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "twilio-webhook"
    }

  # module.ecr_repositories["vycontrol"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "vycontrol"
    }

  # module.ecr_repositories["vycontrol"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "vycontrol"
        name                 = "vycontrol"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["vycontrol"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "vycontrol"
    }

  # module.ecr_repositories["webnimbus-api"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "webnimbus-api"
    }

  # module.ecr_repositories["webnimbus-api"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "webnimbus-api"
        name                 = "webnimbus-api"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["webnimbus-api"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "webnimbus-api"
    }

  # module.ecr_repositories["webphone"].aws_ecr_lifecycle_policy.this will be created
  + resource "aws_ecr_lifecycle_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + rules = [
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 20 untagged images"
                      + rulePriority = 1
                      + selection    = {
                          + countNumber = 20
                          + countType   = "imageCountMoreThan"
                          + tagStatus   = "untagged"
                        }
                    },
                  + {
                      + action       = {
                          + type = "expire"
                        }
                      + description  = "Keep last 100 tagged images"
                      + rulePriority = 2
                      + selection    = {
                          + countNumber   = 100
                          + countType     = "imageCountMoreThan"
                          + tagPrefixList = [
                              + "latest",
                            ]
                          + tagStatus     = "tagged"
                        }
                    },
                ]
            }
        )
      + registry_id = (known after apply)
      + repository  = "webphone"
    }

  # module.ecr_repositories["webphone"].aws_ecr_repository.this will be updated in-place
  ~ resource "aws_ecr_repository" "this" {
        id                   = "webphone"
        name                 = "webphone"
      ~ tags                 = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
      ~ tags_all             = {
          + "environment" = "prod"
          + "layer"       = "persistence"
          + "project"     = "common"
          + "region"      = "us-east-1"
          + "team"        = "DevOps"
        }
        # (4 unchanged attributes hidden)



        # (3 unchanged blocks hidden)
    }

  # module.ecr_repositories["webphone"].aws_ecr_repository_policy.this will be created
  + resource "aws_ecr_repository_policy" "this" {
      + id          = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = [
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryOnlyPull"
                    },
                  + {
                      + Action    = [
                          + "ecr:UploadLayerPart",
                          + "ecr:PutImage",
                          + "ecr:InitiateLayerUpload",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:CompleteLayerUpload",
                          + "ecr:BatchGetImage",
                          + "ecr:BatchCheckLayerAvailability",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::526672058471:root"
                        }
                      + Sid       = "ElasticContainerRegistryPushAndPull"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + registry_id = (known after apply)
      + repository  = "webphone"
    }

Plan: 163 to add, 81 to change, 1 to destroy.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
